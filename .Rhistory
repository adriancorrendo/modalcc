## --------- final plot and clean up data set --------------
for(i in c(1:n))
{ dataset$Quadrant[i] <- "positive"}
dataset$Quadrant[(dataset$x<CLX)&(dataset$y<CLY)] <- "positive"
dataset$Quadrant[(dataset$x>=CLX)&(dataset$y>CLY)] <- "positive"
dataset$Quadrant[(dataset$x>=CLX)&(dataset$y<CLY)] <- "negative"
dataset$Quadrant[(dataset$x<CLX)&(dataset$y>CLY)] <- "negative"
max.x <- max(dataset$x)
max.y <- max(dataset$y)
min.x <- min(dataset$x)
min.y <- min(dataset$y)
final.plot <-
ggplot(data = dataset, aes(x=x, y=y))+
geom_point(aes(color = Quadrant, shape = Quadrant))+
scale_shape_manual(name = "", values = c(4,16))+
scale_color_manual(name = "", values = c("dark red","steelblue"))+
labs(x="Soil test value", y="Relative yield (%)")+
geom_vline(xintercept = CLX, col = "dark red", linetype = "dashed")+
geom_hline(yintercept = CLY, col = "dark red", linetype = "dashed")+
# Critical STV
annotate(geom = "text", label = paste("CSTV =", CLX, "ppm"),
x = CLX+1, y = 0, angle = 90, hjust = 0, vjust = 1, col = "grey25") +
# RY target
annotate(geom = "text", label = paste0("RY = ", round(CLY, 0), "%"),
x = max(data_test$STV), y = CLY-2, angle = 0, hjust = 1, vjust = 1,
col = "grey25")+
# Quadrants
annotate(geom = "label", x = min.x+(max.x-min.x)*0.01, y =  min.y+(max.y-min.y)*0.99,
label = "I", size = 3, color = "dark red")+
annotate(geom = "label", x = min.x+(max.x-min.x)*0.99, y =  min.y+(max.y-min.y)*0.99,
label = "II", size = 3, color = "navy")+
annotate(geom = "label", x = min.x+(max.x-min.x)*0.99, y =  min.y+(max.y-min.y)*0.01,
label = "III", size = 3, color = "dark red")+
annotate(geom = "label", x = min.x+(max.x-min.x)*0.01, y =  min.y+(max.y-min.y)*0.01,
label = "IV", size = 3, color = "navy")+
theme_bw()+
theme(legend.position = "top")
return(final.plot)
}
cate.nelson.visual(data = data_test, x = STV, y = RY, target = 90)
cate.nelson.visual <- function(data, x, y, target){
x <- data$x
y <- data$y
##-----order by x and create clx variable for calculation---
n <- length(y)
ygroup <- c('a','b')
xgroup <- c('c','d')
for (i in c(2:n))
{ xgroup[i] <-  c('d')
ygroup[i] <-  c('b') }
dataset <- data.frame(x = x, y = y, xgroup = as.factor(xgroup),
ygroup = as.factor(ygroup))
dataset$ObsNo <- 1:n
dataset <- dataset[with(dataset, order(x, y)), ]
dataset$cly[1] <- 0
for(k in c(2:n))
{dataset$cly[k] <- (dataset$y[k] + dataset$y[k-1])/2}
dataset$cly[1] <- min(dataset$cly[2:n])
## Define the Target of Y variable
CLY <- target
for (i in c(1:n))
{dataset$ygroup[i] <- if(dataset$y[i] >= CLY)  'a' else 'b'}
par(ask=TRUE)
##-order by y, add cly variable, and determine final critical-y-
dataset <- dataset[with(dataset, order(y, x)), ]
dataset$clx[1] <- 0
for(k in c(2:n))
{ dataset$clx[k] <- (dataset$x[k]+dataset$x[k-1])/2 }
dataset$clx[1] <- min(dataset$clx[2:n])
for(j in c(1:n))
{ for (i in c(1:n))
{ (dataset$xgroup[i]
<- if(dataset$x[i] < dataset$clx[j]) 'c' else 'd')}
for (i in c(1:n))
{ dataset$q.i[i] <- with(dataset, ifelse
(dataset$xgroup[i]=='c' & dataset$ygroup[i]=='a', 1, 0))
dataset$q.ii[i] <- with(dataset, ifelse
(dataset$xgroup[i]=='d' & dataset$ygroup[i]=='a', 1, 0))
dataset$q.iii[i] <- with(dataset, ifelse
(dataset$xgroup[i]=='d' & dataset$ygroup[i]=='b', 1, 0))
dataset$q.iv[i] <- with(dataset, ifelse
(dataset$xgroup[i]=='c' & dataset$ygroup[i]=='b', 1, 0)) }
dataset$q.err[j] <- (  sum(dataset$q.i) + sum(dataset$q.iii)) }
min.qerr <- min(dataset$q.err)
dataset3 <- subset(dataset, q.err == min.qerr)
CLX <- dataset3$clx[1]
CLX
#plot(q.err~clx, data=dataset, xlab="Critical-x value",
#    ylab="Number of points in error quadrants")
ggplot(data = dataset, aes(x=clx, y=q.err))+
geom_point()+
labs(x="Critical-x value", y="Number of points in error quadrants")+
theme_bw()
## Reset y-grouping for final grouping
#--------------------------------------------------------------
for (i in c(1:n))
{ dataset$q.i[i] <- with(dataset, ifelse
(dataset$xgroup[i]=='c' & dataset$ygroup[i]=='a', 1, 0))
dataset$q.ii[i] <- with(dataset, ifelse
(dataset$xgroup[i]=='d' & dataset$ygroup[i]=='a', 1, 0))
dataset$q.iii[i] <- with(dataset, ifelse
(dataset$xgroup[i]=='d' & dataset$ygroup[i]=='b', 1, 0))
dataset$q.iv[i] <- with(dataset, ifelse
(dataset$xgroup[i]=='c' & dataset$ygroup[i]=='b', 1, 0)) }
## ---------- results and perform chi-square -----------
q.I <- sum(dataset$q.i)
q.II <- sum(dataset$q.ii)
q.III <- sum(dataset$q.iii)
q.IV <- sum(dataset$q.iv)
row.1 <- c(q.I, q.II)
row.2 <- c(q.IV, q.III)
chisq.test(data.frame(row.1,row.2))
## R2 of the model ---------------------------------------------------------
aov.GCN<- lm(y ~ xgroup, data=dataset)
anova(aov.GCN)
r2GCN <- anova(aov.GCN)[1,2]/sum(anova(aov.GCN)[,2])
r2GCN
## --------- final plot and clean up data set --------------
for(i in c(1:n))
{ dataset$Quadrant[i] <- "positive"}
dataset$Quadrant[(dataset$x<CLX)&(dataset$y<CLY)] <- "positive"
dataset$Quadrant[(dataset$x>=CLX)&(dataset$y>CLY)] <- "positive"
dataset$Quadrant[(dataset$x>=CLX)&(dataset$y<CLY)] <- "negative"
dataset$Quadrant[(dataset$x<CLX)&(dataset$y>CLY)] <- "negative"
max.x <- max(dataset$x)
max.y <- max(dataset$y)
min.x <- min(dataset$x)
min.y <- min(dataset$y)
final.plot <-
ggplot(data = dataset, aes(x=x, y=y))+
geom_point(aes(color = Quadrant, shape = Quadrant))+
scale_shape_manual(name = "", values = c(4,16))+
scale_color_manual(name = "", values = c("dark red","steelblue"))+
labs(x="Soil test value", y="Relative yield (%)")+
geom_vline(xintercept = CLX, col = "dark red", linetype = "dashed")+
geom_hline(yintercept = CLY, col = "dark red", linetype = "dashed")+
# Critical STV
annotate(geom = "text", label = paste("CSTV =", CLX, "ppm"),
x = CLX+1, y = 0, angle = 90, hjust = 0, vjust = 1, col = "grey25") +
# RY target
annotate(geom = "text", label = paste0("RY = ", round(CLY, 0), "%"),
x = max(data_test$STV), y = CLY-2, angle = 0, hjust = 1, vjust = 1,
col = "grey25")+
# Quadrants
annotate(geom = "label", x = min.x+(max.x-min.x)*0.01, y =  min.y+(max.y-min.y)*0.99,
label = "I", size = 3, color = "dark red")+
annotate(geom = "label", x = min.x+(max.x-min.x)*0.99, y =  min.y+(max.y-min.y)*0.99,
label = "II", size = 3, color = "navy")+
annotate(geom = "label", x = min.x+(max.x-min.x)*0.99, y =  min.y+(max.y-min.y)*0.01,
label = "III", size = 3, color = "dark red")+
annotate(geom = "label", x = min.x+(max.x-min.x)*0.01, y =  min.y+(max.y-min.y)*0.01,
label = "IV", size = 3, color = "navy")+
theme_bw()+
theme(legend.position = "top")
return(final.plot)
}
cate.nelson.visual(data = data_test, x = STV, y = RY, target = 90)
cate.nelson.visual <- function(data, x, y, target){
##-----order by x and create clx variable for calculation---
n <- length(y)
ygroup <- c('a','b')
xgroup <- c('c','d')
for (i in c(2:n))
{ xgroup[i] <-  c('d')
ygroup[i] <-  c('b') }
dataset <- data.frame(x = x, y = y, xgroup = as.factor(xgroup),
ygroup = as.factor(ygroup))
dataset$ObsNo <- 1:n
dataset <- dataset[with(dataset, order(x, y)), ]
dataset$cly[1] <- 0
for(k in c(2:n))
{dataset$cly[k] <- (dataset$y[k] + dataset$y[k-1])/2}
dataset$cly[1] <- min(dataset$cly[2:n])
## Define the Target of Y variable
CLY <- target
for (i in c(1:n))
{dataset$ygroup[i] <- if(dataset$y[i] >= CLY)  'a' else 'b'}
par(ask=TRUE)
##-order by y, add cly variable, and determine final critical-y-
dataset <- dataset[with(dataset, order(y, x)), ]
dataset$clx[1] <- 0
for(k in c(2:n))
{ dataset$clx[k] <- (dataset$x[k]+dataset$x[k-1])/2 }
dataset$clx[1] <- min(dataset$clx[2:n])
for(j in c(1:n))
{ for (i in c(1:n))
{ (dataset$xgroup[i]
<- if(dataset$x[i] < dataset$clx[j]) 'c' else 'd')}
for (i in c(1:n))
{ dataset$q.i[i] <- with(dataset, ifelse
(dataset$xgroup[i]=='c' & dataset$ygroup[i]=='a', 1, 0))
dataset$q.ii[i] <- with(dataset, ifelse
(dataset$xgroup[i]=='d' & dataset$ygroup[i]=='a', 1, 0))
dataset$q.iii[i] <- with(dataset, ifelse
(dataset$xgroup[i]=='d' & dataset$ygroup[i]=='b', 1, 0))
dataset$q.iv[i] <- with(dataset, ifelse
(dataset$xgroup[i]=='c' & dataset$ygroup[i]=='b', 1, 0)) }
dataset$q.err[j] <- (  sum(dataset$q.i) + sum(dataset$q.iii)) }
min.qerr <- min(dataset$q.err)
dataset3 <- subset(dataset, q.err == min.qerr)
CLX <- dataset3$clx[1]
CLX
#plot(q.err~clx, data=dataset, xlab="Critical-x value",
#    ylab="Number of points in error quadrants")
ggplot(data = dataset, aes(x=clx, y=q.err))+
geom_point()+
labs(x="Critical-x value", y="Number of points in error quadrants")+
theme_bw()
## Reset y-grouping for final grouping
#--------------------------------------------------------------
for (i in c(1:n))
{ dataset$q.i[i] <- with(dataset, ifelse
(dataset$xgroup[i]=='c' & dataset$ygroup[i]=='a', 1, 0))
dataset$q.ii[i] <- with(dataset, ifelse
(dataset$xgroup[i]=='d' & dataset$ygroup[i]=='a', 1, 0))
dataset$q.iii[i] <- with(dataset, ifelse
(dataset$xgroup[i]=='d' & dataset$ygroup[i]=='b', 1, 0))
dataset$q.iv[i] <- with(dataset, ifelse
(dataset$xgroup[i]=='c' & dataset$ygroup[i]=='b', 1, 0)) }
## ---------- results and perform chi-square -----------
q.I <- sum(dataset$q.i)
q.II <- sum(dataset$q.ii)
q.III <- sum(dataset$q.iii)
q.IV <- sum(dataset$q.iv)
row.1 <- c(q.I, q.II)
row.2 <- c(q.IV, q.III)
chisq.test(data.frame(row.1,row.2))
## R2 of the model ---------------------------------------------------------
aov.GCN<- lm(y ~ xgroup, data=dataset)
anova(aov.GCN)
r2GCN <- anova(aov.GCN)[1,2]/sum(anova(aov.GCN)[,2])
r2GCN
## --------- final plot and clean up data set --------------
for(i in c(1:n))
{ dataset$Quadrant[i] <- "positive"}
dataset$Quadrant[(dataset$x<CLX)&(dataset$y<CLY)] <- "positive"
dataset$Quadrant[(dataset$x>=CLX)&(dataset$y>CLY)] <- "positive"
dataset$Quadrant[(dataset$x>=CLX)&(dataset$y<CLY)] <- "negative"
dataset$Quadrant[(dataset$x<CLX)&(dataset$y>CLY)] <- "negative"
max.x <- max(dataset$x)
max.y <- max(dataset$y)
min.x <- min(dataset$x)
min.y <- min(dataset$y)
final.plot <-
ggplot(data = dataset, aes(x=x, y=y))+
geom_point(aes(color = Quadrant, shape = Quadrant))+
scale_shape_manual(name = "", values = c(4,16))+
scale_color_manual(name = "", values = c("dark red","steelblue"))+
labs(x="Soil test value", y="Relative yield (%)")+
geom_vline(xintercept = CLX, col = "dark red", linetype = "dashed")+
geom_hline(yintercept = CLY, col = "dark red", linetype = "dashed")+
# Critical STV
annotate(geom = "text", label = paste("CSTV =", CLX, "ppm"),
x = CLX+1, y = 0, angle = 90, hjust = 0, vjust = 1, col = "grey25") +
# RY target
annotate(geom = "text", label = paste0("RY = ", round(CLY, 0), "%"),
x = max(data_test$STV), y = CLY-2, angle = 0, hjust = 1, vjust = 1,
col = "grey25")+
# Quadrants
annotate(geom = "label", x = min.x+(max.x-min.x)*0.01, y =  min.y+(max.y-min.y)*0.99,
label = "I", size = 3, color = "dark red")+
annotate(geom = "label", x = min.x+(max.x-min.x)*0.99, y =  min.y+(max.y-min.y)*0.99,
label = "II", size = 3, color = "navy")+
annotate(geom = "label", x = min.x+(max.x-min.x)*0.99, y =  min.y+(max.y-min.y)*0.01,
label = "III", size = 3, color = "dark red")+
annotate(geom = "label", x = min.x+(max.x-min.x)*0.01, y =  min.y+(max.y-min.y)*0.01,
label = "IV", size = 3, color = "navy")+
theme_bw()+
theme(legend.position = "top")
return(final.plot)
}
cate.nelson.visual(data = data_test, x = STV, y = RY, target = 90)
library(modalcc)
roxygen2::roxygenise()
# Example 1 dataset
data_1 = data.frame("RY" = c(65,80,85,88,90,94,93,96,97,95,98,100,99,99,100),
"STV" = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))
library(modalcc)
# Other suggested packages
# Install if needed
# install.packages("easypackages")
# install.packages("devtools")
library(easypackages) # Helps to load packages and install & load them if they are not installed yet.
library(devtools)
packages("readxl") # Open xlsx files
packages("tidyverse", "ggpmisc") # Data wrangling and plots
packages("smatr") # SMA regression analysis for reference
## basic example code
# Example 1 dataset
# Fake dataset manually created
data_1 = data.frame("RY" = c(65,80,85,88,90,94,93,96,97,95,98,100,99,99,100),
"STV" = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))
data_2 = modalcc::data_test
# Create nested structure as example of multiple datasets
data.all = bind_rows(data_1, data_2, .id = "id") %>%
tidyr::nest(data = c("STV", "RY"))
# RY target = 90%, confidence level = 0.95, replace with your desired values
# Data 1
# Using dataframe
fit_example_1 = modALCC(data = data_1, RY = RY, STV = STV, target=90, confidence = 0.95)
# Alternative using the vectors
#fit_example_1 = ALCC(RY = data_1$RY,STV = data_1$STV, target=90,confidence = 0.95)
fit_example_1
# Data 2
fit_example_2 = modALCC(data = data_2, RY = RY, STV = STV, target=90, confidence = 0.95)
fit_example_2
# Run multiple examples at once with map()
fit_examples = data.all %>%
mutate(modALCC = map(data, ~ modALCC(RY = .$RY, STV = .$STV, target=90, confidence = 0.95))) %>%
unnest(., cols = c("modALCC"))
head(fit_examples)
# Alternative with group_map, this does not required nested data.
fit_all = bind_rows(data_1, data_2, .id = "id") %>%
group_by(id) %>%
group_map(~ modALCC(data = ., RY = RY, STV = STV, target = 90, confidence = 0.95))
head(fit_all)
# Extracting curve data as a data.frame to plot
curve_example1 = fit_example_1 %>% unnest(., cols = Curve)
# Plot
data_1 %>%
# Want to remove leverage points?
#dplyr::filter(STV < fit_example_1$CSTV100) %>%
#dplyr::filter(STV < 2*fit_example_1$CSTV90) %>%
ggplot()+
# Points
geom_point(aes(x = STV, y = RY), fill = "orange", shape = 21, size = 4, alpha = 0.75)+
# Highlight potential leverage points >2xCSTV90
geom_point(data = data_1 %>% dplyr::filter(STV > 2*fit_example_1$CSTV90),
aes(x = STV, y = RY, shape = ">2xCSTV90"), col = "dark red", size = 4, alpha = 1)+
# Highlight potential leverage points >2xCSTV90
#geom_point(data = data_1 %>% dplyr::filter(STV > fit_example_1$CSTV100),
#          aes(x = STV, y = RY, shape = ">CSTV100"), col = "dark red", size = 4, alpha = 1)+
scale_shape_manual(name = "", values = c(7,10))+
# Fitted ALCC
geom_line(data = curve_example1, aes(x= STV.fitted, y = RY.fitted), size = 2)+
# Critical value
geom_vline(xintercept = fit_example_1$CSTV, col = "red", size = 1.25, linetype = "dashed")+
# Confidence limits
# Lines
geom_vline(xintercept = fit_example_1$LL, col = "red", size = 0.75, linetype = "dotted")+
geom_vline(xintercept = fit_example_1$UL, col = "red", size = 0.75, linetype = "dotted")+
# Shade
ggpp::annotate(geom = "rect", xmin = fit_example_1$LL, xmax = fit_example_1$UL,
ymin = min(data_1$RY), ymax = 100, alpha = .3, fill = "red")+
# Axis titles
labs(x = "Soil Test Value (units)", y = "Relative Yield (%)")+
theme_bw()+
theme(legend.position = "top")+
# Annotate critical values data
ggpp::annotate(geom = "table", y = min(data_1$RY), x = fit_example_1$UL + 0.5, hjust= 0, vjust = 0,
label = fit_example_1 %>% dplyr::select(CSTV, LL, UL, r) %>%
mutate_at(.vars = c("r"), ~round(.,2)) %>%
mutate_at(.vars = c("CSTV","LL","UL"), ~round(.,1))
)
# SMA regression
SMA_example1 = fit_example_1 %>%  unnest(., cols = SMA)
SMA_example1 %>%
ggplot(aes(x = arc_RY, y = ln_STV))+
ggtitle("SMA Regression. Dataset 1")+
geom_point(shape=21, fill = "orange", size = 4, alpha = 0.75)+
#SMA Line
geom_path(aes(x=arc_RY, y = SMA_line, linetype = "SMA_fit"), size = 2, col = "grey25")+
scale_linetype_manual(name="", values = c("solid"))+
#Critical value
geom_vline(xintercept = 0, col = "grey10", size = 1.25, linetype = "dashed")+
theme_bw()+
# Axis titles
labs(y = "ln_STV", y = "asin(sqrt(RY))-centered")
# Residuals plot
SMA_example1 %>%
ggplot(aes(x = fitted_axis, y = residuals))+
ggtitle("Residuals SMA. Dataset 2")+
geom_point(shape=21, fill = "orange", size = 4, alpha = 0.75)+
geom_hline(yintercept = 0, col = "grey10", size = 1.25, linetype = "dashed")+
theme_bw()+
# Axis titles
labs(x = "Fitted Axis -SMA- (see Warton et al. 2006)", y = "Residuals (STV units)")
# Extracting curve data as a data.frame to plot
curve_example1 = fit_example_1 %>% unnest(., cols = Curve)
# Plot
data_1 %>%
# Want to remove leverage points?
#dplyr::filter(STV < fit_example_1$CSTV100) %>%
#dplyr::filter(STV < 2*fit_example_1$CSTV90) %>%
ggplot()+
# Points
geom_point(aes(x = STV, y = RY), fill = "orange", shape = 21, size = 4, alpha = 0.75)+
# Highlight potential leverage points >2xCSTV90
geom_point(data = data_1 %>% dplyr::filter(STV > 2*fit_example_1$CSTV90),
aes(x = STV, y = RY, shape = ">2xCSTV90"), col = "dark red", size = 4, alpha = 1)+
# Highlight potential leverage points >2xCSTV90
#geom_point(data = data_1 %>% dplyr::filter(STV > fit_example_1$CSTV100),
#          aes(x = STV, y = RY, shape = ">CSTV100"), col = "dark red", size = 4, alpha = 1)+
scale_shape_manual(name = "", values = c(7,10))+
# Fitted ALCC
geom_line(data = curve_example1, aes(x= STV.fitted, y = RY.fitted), size = 2)+
# Critical value
geom_vline(xintercept = fit_example_1$CSTV, col = "red", size = 1.25, linetype = "dashed")+
# Confidence limits
# Lines
geom_vline(xintercept = fit_example_1$LL, col = "red", size = 0.75, linetype = "dotted")+
geom_vline(xintercept = fit_example_1$UL, col = "red", size = 0.75, linetype = "dotted")+
# Shade
ggpp::annotate(geom = "rect", xmin = fit_example_1$LL, xmax = fit_example_1$UL,
ymin = min(data_1$RY), ymax = 100, alpha = .3, fill = "red")+
# Axis titles
labs(x = "Soil Test Value (units)", y = "Relative Yield (%)")+
theme_bw()+
theme(legend.position = "top")+
# Annotate critical values data
ggpp::annotate(geom = "table", y = min(data_1$RY), x = fit_example_1$UL + 0.5, hjust= 0, vjust = 0,
label = fit_example_1 %>% dplyr::select(CSTV, LL, UL, r) %>%
mutate_at(.vars = c("r"), ~round(.,2)) %>%
mutate_at(.vars = c("CSTV","LL","UL"), ~round(.,1))
)
# SMA regression
SMA_example1 = fit_example_1 %>%  unnest(., cols = SMA)
SMA_example1 %>%
ggplot(aes(x = arc_RY, y = ln_STV))+
ggtitle("SMA Regression. Dataset 1")+
geom_point(shape=21, fill = "orange", size = 4, alpha = 0.75)+
#SMA Line
geom_path(aes(x=arc_RY, y = SMA_line, linetype = "SMA_fit"), size = 2, col = "grey25")+
scale_linetype_manual(name="", values = c("solid"))+
#Critical value
geom_vline(xintercept = 0, col = "grey10", size = 1.25, linetype = "dashed")+
theme_bw()+
# Axis titles
labs(y = "ln_STV", y = "asin(sqrt(RY))-centered")
# Residuals plot
SMA_example1 %>%
ggplot(aes(x = fitted_axis, y = residuals))+
ggtitle("Residuals SMA. Dataset 2")+
geom_point(shape=21, fill = "orange", size = 4, alpha = 0.75)+
geom_hline(yintercept = 0, col = "grey10", size = 1.25, linetype = "dashed")+
theme_bw()+
# Axis titles
labs(x = "Fitted Axis -SMA- (see Warton et al. 2006)", y = "Residuals (STV units)")
# Extracting curve data as a data.frame to plot
curve_example2 = fit_example_2 %>% unnest(., cols = Curve)
# Plot
data_2 %>% ggplot()+
# Want to remove leverage points?
#dplyr::filter(STV < fit_example_2$CSTV100) %>%
#dplyr::filter(STV < 2*fit_example_2$CSTV90) %>%
# Points
geom_point(aes(x = STV, y = RY), fill = "#88dbc8", shape = 21, size = 4, alpha = 0.75)+
# Highlight potential leverage points >2xCSTV90
geom_point(data = data_2 %>% dplyr::filter(STV > 2*fit_example_2$CSTV90),
aes(x = STV, y = RY, shape = ">2xCSTV90"), col = "dark red", size = 4, alpha = 1)+
# Highlight potential leverage points >CSTV100
geom_point(data = data_2 %>% dplyr::filter(STV > fit_example_2$CSTV100),
aes(x = STV, y = RY, shape = ">CSTV100"), col = "dark red", size = 4, alpha = 1)+
scale_shape_manual(name = "", values = c(7,10))+
# Fitted ALCC
geom_line(data = curve_example2, aes(x= STV.fitted, y = RY.fitted), size = 2)+
# Critical value
geom_vline(xintercept = fit_example_2$CSTV, col = "red", size = 1.25, linetype = "dashed")+
# Confidence limits
geom_vline(xintercept = fit_example_2$LL, col = "red", size = 0.75, linetype = "dotted")+
geom_vline(xintercept = fit_example_2$UL, col = "red", size = 0.75, linetype = "dotted")+
ggpp::annotate(geom = "rect", xmin = fit_example_2$LL, xmax = fit_example_2$UL,
ymin = min(data_2$RY), ymax = 100, alpha = .3, fill = "red")+
# Axis titles
labs(x = "Soil Test Value (units)", y = "Relative Yield (%)")+
theme_bw()+
theme(legend.position = "top")+
# Annotate critical values data
ggpp::annotate(geom = "table", y = min(data_2$RY), x = fit_example_2$UL + 0.5, hjust= 0, vjust = 0,
label = fit_example_2 %>% dplyr::select(CSTV, LL, UL, r) %>%
mutate_at(.vars = c("r"), ~round(.,2)) %>%
mutate_at(.vars = c("CSTV","LL","UL"), ~round(.,1))
)
# SMA regression
SMA_example2 = fit_example_2 %>%  unnest(., cols = SMA)
SMA_example2 %>%
ggplot(aes(x = arc_RY, y = ln_STV))+
ggtitle("SMA Regression. Dataset 2")+
geom_point(shape=21, fill = "#88dbc8", size = 4, alpha = 0.5)+
#SMA Line
geom_path(aes(x=arc_RY, y = SMA_line, linetype = "SMA_fit"), size = 2, col = "grey25")+
scale_linetype_manual(name="", values = c("solid"))+
#Critical value
geom_vline(xintercept = 0, col = "grey10", size = 1.25, linetype = "dashed")+
theme_bw()+
# Axis titles
labs(y = "ln_STV", y = "asin(sqrt(RY))-centered")
# Residuals plot
resid_example2 = fit_example_2 %>%  unnest(., cols = SMA)
resid_example2 %>%
ggplot(aes(x = fitted_axis, y = residuals))+
ggtitle("Residuals SMA. Dataset 2")+
geom_point(shape = 21, fill = "#88dbc8", size = 4, alpha = 0.5)+
geom_hline(yintercept = 0, col = "grey10", size = 1.25, linetype = "dashed")+
theme_bw()+
# Axis titles
labs(x = "Fitted Axis -SMA- (see Warton et al. 2006)", y = "Residuals (STV units)")
devtools::build_readme()
library(modalcc)
devtools::build_readme()
roxygen2::roxygenise()
library(modalcc)
devtools::build_readme()
usethis::use_build_ignore()
usethis::use_build_ignore(files = "modalcc.Rproj")
library(modalcc)
roxygen2::roxygenise()
devtools::build_readme()
usethis::use_appveyor()
library(modalcc)
devtools::build_readme()
devtools::build_readme()
