% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quadratic_plateau.R
\name{quadratic_plateau}
\alias{quadratic_plateau}
\alias{QP_f}
\alias{SS_QP}
\title{Quadratic Plateau}
\usage{
QP_f(x, intercept, slope, Xc)

SS_QP(x, intercept, slope, Xc)

quadratic_plateau(
  data = NULL,
  STV,
  RY,
  tidy = FALSE,
  plot = FALSE,
  resid = FALSE
)
}
\arguments{
\item{x}{selfstart vector for independent variable, Default: NULL}

\item{intercept}{selfstart arg. for intercept Default: NULL}

\item{slope}{selfstart arg. for slope Default: NULL}

\item{Xc}{selfstart arg. for critical value Default: NULL}

\item{data}{Optional argument to call and object of type data.frame or data.table
containing the STV and RY data, Default: NULL}

\item{STV}{name of the vector containing soil test values (-) of type \code{numeric}.}

\item{RY}{name of the vector containing relative yield values (\%) of type \code{numeric}.}

\item{tidy}{logical operator (TRUE/FALSE) to decide the type of return. TRUE returns a data.frame, FALSE returns a list (default).}

\item{plot}{logical operator (TRUE/FALSE) to plot the quadratic-plateau model, Default: FALSE}

\item{resid}{logical operator (TRUE/FALSE) to plot residuals analysis, Default: FALSE}
}
\value{
returns a \code{data.frame} if plot = FALSE, if plot = TRUE

QP_f: vector of the same length as x using the quadratic-plateau function

SS_QP: selfStart object to pass into the quadratic_plateau fit

quadratic_plateau: function
}
\description{
This function helps to fit a linear-plateau model in order to
estimate critical soil test values (CSTV) above which yield response becomes flat.
}
\details{
This function fits a linear-plateau model using a native selfStart function
}
\note{
Adapted from Austin Pearce's code. For extended reference, we recommend
to visit: https://gradcylinder.org/quad-plateau/ & https://github.com/austinwpearce/SoilTestCocaCola.
}
\examples{
\dontrun{
if(interactive()){
 # Example dataset
 dat <- data.frame("ry" = c(65,80,85,88,90,94,93,96,97,95,98,100,99,99,100),
                   "stv" = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))
 # Run
 fit_example_lp <- quadratic_plateau(data = dat, RY = ry, STV = stv, resid = TRUE, plot = FALSE)
 fit_example_lp
 }
}
}
\seealso{
\code{\link[rlang]{eval_tidy}},\code{\link[rlang]{defusing-advanced}}
\code{\link[minpack.lm]{nlsLM}}
\code{\link[stats]{AIC}},\code{\link[stats]{lm}},\code{\link[stats]{optim}},\code{\link[stats]{coef}},\code{\link[stats]{predict}}
\code{\link[AICcmodavg]{AICc}}
\code{\link[modelr]{model-quality}}
\code{\link[nlstools]{nlsResiduals}}
\code{\link[tidyr]{reexports}}
\code{\link[dplyr]{bind}}
\code{\link[ggplot2]{ggplot}},\code{\link[ggplot2]{aes}},\code{\link[ggplot2]{geom_rug}},\code{\link[ggplot2]{geom_point}},\code{\link[ggplot2]{geom_abline}},\code{\link[ggplot2]{geom_path}},\code{\link[ggplot2]{annotate}},\code{\link[ggplot2]{scale_continuous}},\code{\link[ggplot2]{labs}},\code{\link[ggplot2]{ggtheme}},\code{\link[ggplot2]{theme}}
\code{\link[ggpp]{annotate}}
}
